(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Exp;

Exp = require('./exp');

$(function() {
  return window.EXP = new Exp;
});



},{"./exp":4}],2:[function(require,module,exports){
var Tile, config;

config = require('./config');

Tile = (function() {
  Tile.prototype.x = null;

  Tile.prototype.y = null;

  Tile.prototype.w = null;

  Tile.prototype.tX = null;

  Tile.prototype.tY = null;

  Tile.prototype.c = null;

  Tile.prototype.t = null;

  Tile.prototype.chance = 0.9;

  Tile.prototype.charsToShow = 0;

  function Tile(_arg) {
    var bounds, opts;
    this.x = _arg.x, this.y = _arg.y, this.w = _arg.w;
    this.chars = _.shuffle(config.WORD.split(''));
    this.charCounter = 0;
    opts = {
      font: '18px font',
      fill: 0xffffff,
      align: 'center'
    };
    this.c = new PIXI.Container;
    this.c.width = this.c.height = this.w;
    this.t = new PIXI.extras.BitmapText(' ', opts);
    bounds = this.t.getLocalBounds();
    this.tX = this.x + (this.w / 2) - (bounds.width / 2) - bounds.x;
    this.tY = this.y + (this.w / 2) - (bounds.height / 2) - bounds.y - 10;
    this.t.position.set(this.tX, this.tY);
    this.c.addChild(this.t);
    return null;
  }

  Tile.prototype._getNewChar = function() {
    var char;
    if (this.charCounter === this.chars.length - 1) {
      this.charCounter = 0;
    }
    char = this.chars[this.charCounter++];
    return char;
  };

  Tile.prototype.update = function() {
    var char;
    if (!(this.charsToShow > 0)) {
      return;
    }
    if (Math.random() > this.chance) {
      char = this.charsToShow === 1 ? ' ' : this._getNewChar();
      this.t.text = char;
      this.t.alpha = this.charsToShow / 10;
      this.charsToShow--;
    }
    return null;
  };

  return Tile;

})();

module.exports = Tile;



},{"./config":3}],3:[function(require,module,exports){
module.exports = {
  TILE_WIDTH: 20,
  WORD: 'codedoodl.es'
};



},{}],4:[function(require,module,exports){
var Exp, Tile, config,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Tile = require('./Tile');

config = require('./config');

Exp = (function() {
  Exp.prototype.stage = null;

  Exp.prototype.renderer = null;

  Exp.prototype.w = 0;

  Exp.prototype.h = 0;

  Exp.prototype.cols = null;

  Exp.prototype.rows = null;

  Exp.prototype.pointer = {
    pos: null,
    last: null,
    delta: null
  };

  Exp.prototype.pointerDown = false;

  Exp.prototype.tiles = [];

  function Exp() {
    this.onPointerUp = __bind(this.onPointerUp, this);
    this.onPointerDown = __bind(this.onPointerDown, this);
    this.onPointerMove = __bind(this.onPointerMove, this);
    this.onResize = __bind(this.onResize, this);
    this.update = __bind(this.update, this);
    var loader;
    this.DEBUG = true;
    this.$window = $(window);
    this.$el = $('#exp');
    this.setup();
    loader = PIXI.loader;
    loader.add('font', "fonts/monosten/font.fnt");
    loader.once('complete', this.init.bind(this));
    loader.load();
    return null;
  }

  Exp.prototype.setup = function() {
    this.onResize();
    this.bindEvents();
    return null;
  };

  Exp.prototype.addStats = function() {
    this.stats = new Stats;
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.left = '0px';
    this.stats.domElement.style.top = '0px';
    document.body.appendChild(this.stats.domElement);
    return null;
  };

  Exp.prototype.init = function() {
    console.log("init: ->", this);
    PIXI.RESOLUTION = window.devicePixelRatio || 1;
    PIXI.utils._saidHello = true;
    this.setDims();
    this.renderer = PIXI.autoDetectRenderer(this.w, this.h, {
      antialias: true,
      backgroundColor: 0xEB423E
    });
    this.stage = new PIXI.Container;
    this.setupGrid();
    this.render();
    if (this.DEBUG) {
      this.addStats();
    }
    this.$el.append(this.renderer.view);
    this.draw();
    return null;
  };

  Exp.prototype.draw = function() {
    this.setDims();
    this.update();
    return null;
  };

  Exp.prototype.update = function() {
    if (window.STOP) {
      return requestAnimationFrame(this.update);
    }
    if (this.DEBUG) {
      this.stats.begin();
    }
    this.updateGrid();
    this.render();
    requestAnimationFrame(this.update);
    if (this.DEBUG) {
      this.stats.end();
    }
    return null;
  };

  Exp.prototype.render = function() {
    this.renderer.render(this.stage);
    return null;
  };

  Exp.prototype.bindEvents = function() {
    var downInteraction, moveInteraction, upInteraction;
    downInteraction = 'ontouchstart' in window ? 'touchstart' : 'mousedown';
    upInteraction = 'ontouchstart' in window ? 'touchend' : 'mouseup';
    moveInteraction = 'ontouchstart' in window ? 'touchmove' : 'mousemove';
    this.onResize = _.debounce(this.onResize, 300);
    this.$window.on('resize orientationchange', this.onResize);
    this.$el.on(moveInteraction, this.onPointerMove);
    this.$el.on(downInteraction, this.onPointerDown);
    this.$el.on(upInteraction, this.onPointerUp);
    return null;
  };

  Exp.prototype.onResize = function() {
    this.w = window.innerWidth;
    this.h = window.innerHeight;
    this.setDims();
    return null;
  };

  Exp.prototype.setDims = function() {
    var _ref;
    if ((_ref = this.renderer) != null) {
      _ref.resize(this.w, this.h);
    }
    return null;
  };

  Exp.prototype.setupGrid = function() {
    var i, tile, tileCount, x, y, _i;
    this.cols = Math.ceil(this.w / config.TILE_WIDTH);
    this.rows = Math.ceil(this.h / config.TILE_WIDTH);
    tileCount = this.cols * this.rows;
    for (i = _i = 0; 0 <= tileCount ? _i < tileCount : _i > tileCount; i = 0 <= tileCount ? ++_i : --_i) {
      x = (i % this.cols) * config.TILE_WIDTH;
      y = Math.floor(i / this.cols) * config.TILE_WIDTH;
      tile = new Tile({
        x: x,
        y: y,
        w: config.TILE_WIDTH
      });
      this.tiles.push(tile);
      this.stage.addChild(tile.c);
    }
    return null;
  };

  Exp.prototype.updateGrid = function() {
    var hChars, i, index, indexes, tile, vChars, _i, _j, _len, _len1, _ref, _ref1;
    if (!this.pointer.pos) {
      return;
    }
    indexes = this._getIndexes();
    for (_i = 0, _len = indexes.length; _i < _len; _i++) {
      index = indexes[_i];
      if ((_ref = this.tiles[index]) != null) {
        _ref.charsToShow = 10;
      }
    }
    hChars = [];
    vChars = Array.apply(null, Array(this.tiles.length)).map(function(x, i) {
      return ' ';
    });
    _ref1 = this.tiles;
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      tile = _ref1[i];
      tile.update();
      hChars.push(tile.t.text);
      vChars[(i % this.cols) + Math.floor(i / this.cols)] = tile.t.text;
    }
    if (hChars.join('').indexOf(config.WORD) > -1 || hChars.reverse().join('').indexOf(config.WORD) > -1 || vChars.join('').indexOf(config.WORD) > -1 || vChars.reverse().join('').indexOf(config.WORD) > -1) {
      window.STOP = 1;
    }
    console.log("L-R", hChars.join('').indexOf(config.WORD));
    console.log("R-L", hChars.reverse().join('').indexOf(config.WORD));
    console.log("T-B", vChars.join('').indexOf(config.WORD));
    console.log("B-T", vChars.reverse().join('').indexOf(config.WORD));
    return null;
  };

  Exp.prototype._getIndexes = function() {
    var closestIndex, delta, indexes;
    closestIndex = (Math.floor(this.pointer.pos.x / config.TILE_WIDTH)) + ((Math.floor(this.pointer.pos.y / config.TILE_WIDTH)) * this.cols) - this.cols;
    delta = Math.max(Math.abs(this.pointer.delta.x), Math.abs(this.pointer.delta.y));
    indexes = [closestIndex];
    if (delta > 50) {
      indexes.push(closestIndex - 1, closestIndex + 1, closestIndex - this.cols, closestIndex + this.cols);
    }
    if (delta > 80) {
      indexes.push(closestIndex - 2, closestIndex + 2, closestIndex - this.cols - 1, closestIndex - this.cols + 1, closestIndex + this.cols - 1, closestIndex + this.cols + 1, closestIndex - this.cols * 2, closestIndex + this.cols * 2);
    }
    if (delta > 120) {
      indexes.push(closestIndex - 3, closestIndex + 3, closestIndex - this.cols - 2, closestIndex - this.cols + 2, closestIndex + this.cols - 2, closestIndex + this.cols + 2, closestIndex - (this.cols * 2) - 1, closestIndex - (this.cols * 2) + 1, closestIndex + (this.cols * 2) - 1, closestIndex + (this.cols * 2) + 1, closestIndex - this.cols * 3, closestIndex + this.cols * 3);
    }
    return indexes;
  };

  Exp.prototype.onPointerMove = function(e) {
    var x, y;
    if ('ontouchstart' in window) {
      x = e.originalEvent.touches[0].pageX;
      y = e.originalEvent.touches[0].pageY;
    } else {
      x = e.pageX;
      y = e.pageY;
    }
    if (this.pointer.pos) {
      this.pointer.last = {
        x: this.pointer.pos.x,
        y: this.pointer.pos.y
      };
    }
    this.pointer.pos = {
      x: x,
      y: y
    };
    if (this.pointer.last) {
      this.pointer.delta = {
        x: this.pointer.pos.x - this.pointer.last.x,
        y: this.pointer.pos.y - this.pointer.last.y
      };
    } else {
      this.pointer.delta = {
        x: 0,
        y: 0
      };
    }
    return null;
  };

  Exp.prototype.onPointerDown = function() {
    this.pointerDown = true;
    return null;
  };

  Exp.prototype.onPointerUp = function() {
    this.pointerDown = false;
    return null;
  };

  Exp.prototype.EXP = function() {
    return window.EXP;
  };

  return Exp;

})();

module.exports = Exp;



},{"./Tile":2,"./config":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
