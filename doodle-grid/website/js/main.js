(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Exp;

Exp = require('./exp');

window.EXP = new Exp;



},{"./exp":5}],2:[function(require,module,exports){
// http://en.wikipedia.org/wiki/Euclidean_distance#Three_dimensions

module.exports = function(a, b) {

  // return Math.sqrt(
  //   Math.pow(a[0]-b[0], 2) +
  //   Math.pow(a[1]-b[1], 2) +
  //   Math.pow(a[2]-b[2], 2)
  // )

  // return Math.sqrt(
  //   [0,1,2].reduce(function(prev, current, i) {
  //     return prev + Math.pow(a[i]-b[i], 2);
  //   }, 0)
  // );

  var sum = 0;
  var n;
  for (n=0; n < a.length; n++) {
    sum += Math.pow(a[n]-b[n], 2);
  }
  return Math.sqrt(sum);
}
},{}],3:[function(require,module,exports){
var Tile, config;

config = require('./config');

Tile = (function() {
  Tile.prototype.x = null;

  Tile.prototype.y = null;

  Tile.prototype.w = null;

  Tile.prototype.tX = null;

  Tile.prototype.tY = null;

  Tile.prototype.c = null;

  Tile.prototype.t = null;

  Tile.prototype.centre = null;

  Tile.prototype.chance = 0.9;

  Tile.prototype.charsToShow = 0;

  Tile.prototype.opts = {
    font: '18px font',
    fill: 0xffffff
  };

  function Tile(_arg) {
    var bounds;
    this.x = _arg.x, this.y = _arg.y, this.w = _arg.w;
    this.centre = {
      x: this.x + this.w / 2,
      y: this.y + this.w / 2
    };
    this.c = new PIXI.Container;
    this.c.width = this.c.height = this.w;
    this.t = new PIXI.extras.BitmapText(' ', this.opts);
    bounds = this.t.getLocalBounds();
    this.tX = this.centre.x - (bounds.width / 2) - bounds.x;
    this.tY = this.centre.y - (bounds.height / 2) - bounds.y - 10;
    this.t.position.set(this.tX, this.tY);
    this.c.addChild(this.t);
    this.setAlphabet();
    return null;
  }

  Tile.prototype._getNewChar = function() {
    var char;
    if (this.charCounter === this.chars.length - 1) {
      this.charCounter = 0;
    }
    char = this.chars[this.charCounter++];
    return char;
  };

  Tile.prototype.setAlphabet = function(themeIndex) {
    if (themeIndex == null) {
      themeIndex = 0;
    }
    this.chars = config.THEMES[themeIndex].alphabet.chars;
    this.chars = config.THEMES[themeIndex].alphabet.shuffle ? _.shuffle(this.chars) : this.chars;
    this.charCounter = 0;
    return null;
  };

  Tile.prototype.update = function() {
    var alpha, avChar, char;
    if (!(this.charsToShow > 0)) {
      return;
    }
    if (Math.random() > this.chance) {
      char = this.charsToShow === 1 ? ' ' : this._getNewChar();
      avChar = (config.MIN_CHARS_TO_SHOW + config.MAX_CHARS_TO_SHOW) / 2;
      alpha = Math.min(this.charsToShow / avChar, 1);
      this.t.text = char;
      this.t.alpha = alpha;
      this.charsToShow--;
    }
    return null;
  };

  return Tile;

})();

module.exports = Tile;



},{"./config":4}],4:[function(require,module,exports){
module.exports = {
  TILE_WIDTH: 16,
  MIN_RADIUS: 10,
  MAX_RADIUS: 50,
  MAX_DELTA: 150,
  MIN_CHARS_TO_SHOW: 8,
  MAX_CHARS_TO_SHOW: 12,
  THEMES: [
    {
      alphabet: {
        chars: 'codedoodl.es'.split(''),
        shuffle: true
      },
      bg: 0xEB423E,
      words: ['code', 'doodle'],
      radiusMultiplier: 1
    }, {
      alphabet: {
        chars: 'etaoinshrd'.split(''),
        shuffle: true
      },
      bg: 0x395CAA,
      words: ['date', 'hind', 'shot', 'haste', 'airshot', 'shorten', 'earth', 'other', 'shine', 'trash'],
      radiusMultiplier: 1.5
    }, {
      alphabet: {
        chars: 'abcdefghijklmnopqrstuvwxyz0123456789!?*()@£$%^&_-+=[]{}:;\'"\\|<>,./~`'.split(''),
        shuffle: true
      },
      bg: 0x000000,
      words: [],
      radiusMultiplier: 3
    }, {
      alphabet: {
        chars: '1234567890'.split(''),
        shuffle: true
      },
      bg: 0x1E502C,
      words: [],
      radiusMultiplier: 0.5
    }, {
      alphabet: {
        chars: '!?*()@£$%^&_-+=[]{}:;\'"\\|<>,./~`'.split(''),
        shuffle: false
      },
      bg: 0x5740AC,
      radiusMultiplier: 1,
      words: []
    }
  ]
};

window.config = module.exports;



},{}],5:[function(require,module,exports){
var Exp, Tile, config, eDist,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Tile = require('./Tile');

config = require('./config');

eDist = require('euclidean-distance');

Exp = (function() {
  Exp.prototype.stage = null;

  Exp.prototype.renderer = null;

  Exp.prototype.w = 0;

  Exp.prototype.h = 0;

  Exp.prototype.cols = null;

  Exp.prototype.rows = null;

  Exp.prototype.pointer = {
    pos: null,
    last: null,
    delta: null
  };

  Exp.prototype.marker = {
    pos: {
      x: 0,
      y: 0
    },
    circle: null,
    indicator: null
  };

  Exp.prototype.pointerDown = false;

  Exp.prototype.activeThemeIndex = 0;

  Exp.prototype.themeChanging = false;

  Exp.prototype.tiles = [];

  function Exp() {
    this.onPointerUp = __bind(this.onPointerUp, this);
    this.onPointerDown = __bind(this.onPointerDown, this);
    this.onPointerMove = __bind(this.onPointerMove, this);
    this.updateMarker = __bind(this.updateMarker, this);
    this.setupMarker = __bind(this.setupMarker, this);
    this.onResize = __bind(this.onResize, this);
    this.update = __bind(this.update, this);
    var loader;
    this.DEBUG = /\?debug/.test(window.location.search);
    this.setup();
    loader = PIXI.loader;
    loader.add('font', "fonts/monosten/font.fnt");
    loader.once('complete', this.init.bind(this));
    loader.load();
    return null;
  }

  Exp.prototype.setup = function() {
    this.onResize();
    return null;
  };

  Exp.prototype.addStats = function() {
    this.stats = new Stats;
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.left = '0px';
    this.stats.domElement.style.top = '0px';
    document.body.appendChild(this.stats.domElement);
    return null;
  };

  Exp.prototype.init = function() {
    var rendererOpts;
    console.log("init: ->", this);
    PIXI.RESOLUTION = window.devicePixelRatio || 1;
    PIXI.utils._saidHello = true;
    this.setDims();
    rendererOpts = {
      antialias: true,
      backgroundColor: config.THEMES[this.activeThemeIndex].bg,
      resolution: PIXI.RESOLUTION
    };
    this.renderer = PIXI.autoDetectRenderer(this.w * PIXI.RESOLUTION, this.h * PIXI.RESOLUTION, rendererOpts);
    this.stage = new PIXI.Container;
    this.setupGrid();
    this.setupMarker();
    this.render();
    if (this.DEBUG) {
      this.addStats();
    }
    document.body.appendChild(this.renderer.view);
    this.bindEvents();
    this.draw();
    return null;
  };

  Exp.prototype.draw = function() {
    this.setDims();
    this.update();
    return null;
  };

  Exp.prototype.update = function() {
    if (window.STOP) {
      return requestAnimationFrame(this.update);
    }
    if (this.DEBUG) {
      this.stats.begin();
    }
    this.updateMarker();
    this.updateGrid();
    this.render();
    requestAnimationFrame(this.update);
    if (this.DEBUG) {
      this.stats.end();
    }
    return null;
  };

  Exp.prototype.render = function() {
    this.renderer.render(this.stage);
    return null;
  };

  Exp.prototype.bindEvents = function() {
    var downInteraction, moveInteraction, upInteraction;
    downInteraction = 'ontouchstart' in window ? 'touchstart' : 'mousedown';
    upInteraction = 'ontouchstart' in window ? 'touchend' : 'mouseup';
    moveInteraction = 'ontouchstart' in window ? 'touchmove' : 'mousemove';
    this.onResize = _.debounce(this.onResize, 300);
    window.addEventListener('resize', this.onResize, false);
    window.addEventListener('orientationchange', this.onResize, false);
    this.renderer.view.addEventListener(moveInteraction, this.onPointerMove, false);
    this.renderer.view.addEventListener(downInteraction, this.onPointerDown, false);
    this.renderer.view.addEventListener(upInteraction, this.onPointerUp, false);
    return null;
  };

  Exp.prototype.onResize = function() {
    this.w = window.innerWidth;
    this.h = window.innerHeight;
    this.setDims();
    return null;
  };

  Exp.prototype.setDims = function() {
    var _ref;
    if ((_ref = this.renderer) != null) {
      _ref.resize(this.w, this.h);
    }
    return null;
  };

  Exp.prototype.setTheme = function(index) {
    if (index == null) {
      index = null;
    }
    if (this.themeChanging) {
      return;
    }
    if (!index) {
      index = this.activeThemeIndex === config.THEMES.length - 1 ? this.activeThemeIndex = 0 : this.activeThemeIndex + 1;
    }
    this.activeThemeIndex = index;
    this.renderer.backgroundColor = config.THEMES[this.activeThemeIndex].bg;
    this.themeChanging = true;
    return null;
  };

  Exp.prototype.setupGrid = function() {
    var i, tile, tileCount, x, y, _i;
    this.cols = Math.ceil(this.w / config.TILE_WIDTH);
    this.rows = Math.ceil(this.h / config.TILE_WIDTH);
    tileCount = this.cols * this.rows;
    for (i = _i = 0; 0 <= tileCount ? _i < tileCount : _i > tileCount; i = 0 <= tileCount ? ++_i : --_i) {
      x = (i % this.cols) * config.TILE_WIDTH;
      y = Math.floor(i / this.cols) * config.TILE_WIDTH;
      tile = new Tile({
        x: x,
        y: y,
        w: config.TILE_WIDTH
      });
      this.tiles.push(tile);
      this.stage.addChild(tile.c);
    }
    return null;
  };

  Exp.prototype.updateGrid = function() {
    var i, indexes, item, tile, _i, _j, _len, _len1, _ref, _ref1;
    if (!this.pointer.pos) {
      return;
    }
    indexes = this._getIndexes();
    for (_i = 0, _len = indexes.length; _i < _len; _i++) {
      item = indexes[_i];
      if ((_ref = this.tiles[item.index]) != null) {
        _ref.charsToShow = item.chars;
      }
    }
    _ref1 = this.tiles;
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      tile = _ref1[i];
      tile.update();
      if (this.themeChanging) {
        tile.setAlphabet(this.activeThemeIndex);
      }
    }
    if (this.themeChanging) {
      this.themeChanging = false;
    }
    return null;
  };

  Exp.prototype._getIndexes = function() {
    var chars, dist, index, indexes, tile, _i, _len, _ref;
    indexes = [];
    _ref = this.tiles;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      tile = _ref[index];
      if (this.marker.circle.contains(tile.centre.x, tile.centre.y)) {
        dist = eDist([this.marker.circle.x, this.marker.circle.y], [tile.centre.x, tile.centre.y]);
        dist = Math.min(dist, this.marker.circle.radius);
        chars = config.MAX_CHARS_TO_SHOW - Math.floor((dist / this.marker.circle.radius) * config.MAX_CHARS_TO_SHOW);
        chars += config.MIN_CHARS_TO_SHOW;
        indexes.push({
          index: index,
          chars: chars
        });
      }
    }
    return indexes;
  };

  Exp.prototype.setupMarker = function() {
    this.marker.pos.x = this.w / 2;
    this.marker.pos.y = this.h / 2;
    this.marker.circle = new PIXI.Circle(this.w / 2, this.h / 2, 0);
    if (this.DEBUG) {
      this.addStats();
      this.marker.indicator = new PIXI.Graphics;
      this.marker.indicator.beginFill(0xffffff);
      this.marker.indicator.drawCircle(0, 0, 10);
      this.stage.addChild(this.marker.indicator);
      this.marker.indicator.x = this.marker.pos.x;
      this.marker.indicator.y = this.marker.pos.y;
      this.marker.indicator.visible = true;
    }
    return null;
  };

  Exp.prototype.updateMarker = function() {
    var delta, radius, xD, yD;
    if (!this.pointer.pos) {
      return;
    }
    xD = this.pointer.pos.x - this.marker.pos.x;
    yD = this.pointer.pos.y - this.marker.pos.y;
    this.marker.pos.x += xD * 0.1;
    this.marker.pos.y += yD * 0.1;
    this.marker.circle.x = this.marker.pos.x;
    this.marker.circle.y = this.marker.pos.y;
    delta = Math.max(Math.abs(this.pointer.delta.x), Math.abs(this.pointer.delta.y));
    radius = (((Math.min((delta / config.MAX_DELTA) * 100, config.MAX_DELTA)) / 100) * config.MAX_RADIUS) + config.MIN_RADIUS;
    radius = radius * config.THEMES[this.activeThemeIndex].radiusMultiplier;
    this.marker.circle.radius = radius;
    this.pointer.delta.x *= 0.98;
    this.pointer.delta.y *= 0.98;
    if (this.DEBUG) {
      this.marker.indicator.x = this.marker.pos.x;
      this.marker.indicator.y = this.marker.pos.y;
    }
    return null;
  };

  Exp.prototype.onPointerMove = function(e) {
    var newDX, newDY, x, y;
    if ('ontouchstart' in window) {
      x = e.originalEvent.touches[0].pageX;
      y = e.originalEvent.touches[0].pageY;
    } else {
      x = e.pageX;
      y = e.pageY;
    }
    if (this.pointer.pos) {
      this.pointer.last = {
        x: this.pointer.pos.x,
        y: this.pointer.pos.y
      };
    }
    this.pointer.pos = {
      x: x,
      y: y
    };
    if (this.pointer.last) {
      newDX = this.pointer.pos.x - this.pointer.last.x;
      newDY = this.pointer.pos.y - this.pointer.last.y;
      if (Math.max(Math.abs(newDX), Math.abs(newDY)) > Math.max(Math.abs(this.pointer.delta.x), Math.abs(this.pointer.delta.y))) {
        this.pointer.delta = {
          x: this.pointer.pos.x - this.pointer.last.x,
          y: this.pointer.pos.y - this.pointer.last.y
        };
      } else {
        this.pointer.delta.x *= 0.98;
        this.pointer.delta.y *= 0.98;
      }
    } else {
      this.pointer.delta = {
        x: 0,
        y: 0
      };
    }
    return null;
  };

  Exp.prototype.onPointerDown = function() {
    this.pointerDown = true;
    return null;
  };

  Exp.prototype.onPointerUp = function() {
    this.pointerDown = false;
    this.setTheme();
    return null;
  };

  Exp.prototype.EXP = function() {
    return window.EXP;
  };

  return Exp;

})();

module.exports = Exp;



},{"./Tile":3,"./config":4,"euclidean-distance":2}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
